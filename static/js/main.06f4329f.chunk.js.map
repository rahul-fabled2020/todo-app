{"version":3,"sources":["components/Tab.js","components/Tabs.js","components/TodoListItem.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Tab","onClick","props","label","this","activeTab","className","React","Component","Tabs","onClickTabItem","tab","setState","state","children","map","child","key","TodoListItem","listObject","index","isCompleted","type","name","onChange","onCheckItem","value","checked","details","handleDeleteItem","e","TodoList","todoList","listComponent","visibility","labels","active","completed","filterList","TodoForm","onSubmit","preventDefault","textElement","target","elements","text","trim","error","handleAddItem","undefined","App","search","prevState","checkBox","parseInt","newValue","slice","window","confirm","handleDeleteAll","filter","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","myArray","i","length","all","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.06f4329f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Tab extends React.Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n      },\r\n    } = this;\r\n    \r\n    let className = 'tabs__list-item';\r\n\r\n    if(activeTab === label) {\r\n      className += ' tabs__list--active'\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className = {className}\r\n        onClick = {onClick}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tab from './Tab';\n\nexport default class Tabs extends React.Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab) => {\n    this.setState(() => ({ activeTab: tab }));\n  }\n\n  render() {\n    const {\n      onClickTabItem,\n      props: {\n        children,\n      },\n      state: {\n        activeTab,\n      }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tabs__list\">\n          {children.map((child) => {\n            const { label } = child.props;\n\n            return (\n              <Tab\n                activeTab = {activeTab}\n                key = {label}\n                label={label}\n                onClick = {onClickTabItem}\n              />\n            );\n          })}\n        </ul>\n        <div className=\"tabs__content\">\n          {children.map((child)=>{\n            if(child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}","import React from \"react\";\r\n\r\nfunction TodoListItem(props) {\r\n  const {listObject, index} = props;\r\n  \r\n  return (\r\n    <li\r\n      className={\"todo-list__item\" + (listObject.isCompleted ? \" strike\" : \"\")}\r\n    >\r\n      <input\r\n        className=\"todo-list__checkbox\"\r\n        type=\"checkbox\"\r\n        name=\"toDoStatus\"\r\n        onChange={props.onCheckItem}\r\n        value={index}\r\n        checked={listObject.isCompleted}\r\n      />\r\n      {listObject.details}\r\n      {props.handleDeleteItem && <button className=\"todo-list__button\" onClick = {(e) => {props.handleDeleteItem(e, index)}}><i className=\"fas fa-trash-alt\"></i></button>}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoListItem;","import React from \"react\";\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nexport default function TodoList(props) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {props.todoList.map((listObject, index) =>\r\n        filterList(props, listObject, index)\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction filterList(props, listObject, index) {\r\n  const listComponent = (\r\n    <TodoListItem\r\n      key={index}\r\n      listObject={listObject}\r\n      index={index}\r\n      onCheckItem={props.onCheckItem}\r\n      handleDeleteItem = {props.handleDeleteItem}\r\n    />\r\n  );\r\n  switch (props.visibility) {\r\n    case props.labels.active:\r\n      return !listObject.isCompleted && listComponent;\r\n    case props.labels.completed:\r\n      return listObject.isCompleted && listComponent;\r\n    default:\r\n      return listComponent;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: undefined,\r\n    }\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const textElement = e.target.elements[\"toDoText\"];\r\n\r\n    const text = textElement.value.trim();\r\n    const error = this.props.handleAddItem(text);\r\n\r\n    this.setState(()=>({error}));\r\n    textElement.value='';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <form onSubmit={this.onSubmit} className=\"todo-form\">\r\n          {this.state.error && <div className=\"todo-form__error\">{this.state.error}</div>}\r\n          <input type=\"text\" name=\"toDoText\" className=\"todo-form__input\" />\r\n          <button className=\"todo-form__button\">Add</button>\r\n        </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./css/App.css\";\nimport Tabs from \"./components/Tabs\";\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\nimport \"./css/fontawesome-free-5.13.0-web/css/all.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n    };\n  }\n\n  componentDidMount() {\n    try {\n      const json = window.localStorage.getItem(\"todoList\");\n      const todoList = JSON.parse(json);\n\n      if(todoList) {\n        this.setState(() => ({ todoList }));\n      }\n    } catch (e) {\n      //Do nothing\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n      const json = JSON.stringify(this.state.todoList);\n      window.localStorage.setItem(\"todoList\", json);    \n  }\n\n  search(text, myArray) {\n    for (let i = 0; i < myArray.length; i++) {\n      if (myArray[i].details === text) {\n        return myArray[i];\n      }\n    }\n  }\n\n  handleAddItem = (text) => {\n    if (!text) {\n      return \"Please enter something to add.\";\n    } else if (this.search(text, this.state.todoList)) {\n      return \"The task already exists.\";\n    }\n\n    this.setState((prevState) => ({\n      todoList: [...prevState.todoList, { details: text, isCompleted: false }],\n    }));\n  };\n\n  onCheckItem = (e) => {\n    const checkBox = e.target;\n    const index = parseInt(checkBox.value);\n    const newValue = this.state.todoList[index];\n    newValue.isCompleted = checkBox.checked;\n\n    this.setState((prevState) => ({\n      todoList: [\n        ...prevState.todoList.slice(undefined, index),\n        newValue,\n        ...prevState.todoList.slice(index + 1),\n      ],\n    }));\n  };\n\n  handleDeleteItem = (e, index) => {\n    e.preventDefault();\n\n    if(!window.confirm(\"Are you sure to delete?\")) return;\n\n    this.setState((prevState) => ({\n      todoList: [\n        ...prevState.todoList.slice(undefined, index),\n        ...prevState.todoList.slice(index + 1),\n      ],\n    }));\n  };\n\n  handleDeleteAll = (e) => {\n    if(!window.confirm(\"Are you sure to delete?\")) return;\n\n    this.setState((prevState) => ({\n      todoList: prevState.todoList.filter(\n        (listObject) => !listObject.isCompleted\n      ),\n    }));\n  };\n\n  render() {\n    const labels = { all: \"All\", active: \"Active\", completed: \"Completed\" };\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__heading\">#todo App</h1>\n        <Tabs>\n          <div label={labels.all}>\n            <TodoForm handleAddItem={this.handleAddItem} />\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.all}\n              labels={labels}\n            />\n          </div>\n          <div label={labels.active}>\n            <TodoForm handleAddItem={this.handleAddItem} />\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.active}\n              labels={labels}\n            />\n          </div>\n          <div label={labels.completed}>\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.completed}\n              labels={labels}\n              handleDeleteItem={this.handleDeleteItem}\n            />\n            <div className=\"app__btn-wrapper\">\n              <button onClick={this.handleDeleteAll} className=\"app__button\">\n                Delete All\n              </button>\n            </div>\n          </div>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}