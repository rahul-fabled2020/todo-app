{"version":3,"sources":["components/Tab.js","components/Tabs.js","components/TodoListItem.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Tab","onClick","props","label","this","activeTab","className","React","Component","Tabs","onClickTabItem","tab","setState","state","children","map","child","key","TodoListItem","listObject","index","searchText","details","toLowerCase","indexOf","isCompleted","type","name","onChange","onCheckItem","value","checked","handleDeleteItem","e","TodoList","todoList","listComponent","visibility","labels","active","completed","filterList","TodoForm","onSubmit","preventDefault","textElement","target","elements","text","trim","error","handleAddItem","undefined","App","updateSearchText","search","prevState","checkBox","parseInt","newValue","slice","window","confirm","handleDeleteAll","filter","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","myArray","i","length","all","onInput","placeholder","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mSAGqBA,G,kNAOnBC,QAAU,WAAO,IAAD,EACa,EAAKC,MAAxBC,EADM,EACNA,OACRF,EAFc,EACCA,SACPE,I,uDAGA,IAENF,EAKEG,KALFH,QAFK,EAOHG,KAJFF,MACEG,EAJG,EAIHA,UACAF,EALG,EAKHA,MAIAG,EAAY,kBAMhB,OAJGD,IAAcF,IACfG,GAAa,uBAIb,wBACEA,UAAaA,EACbL,QAAWA,GAEVE,O,GAhCwBI,IAAMC,YCElBC,E,kDAKnB,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAORQ,eAAiB,SAACC,GAChB,EAAKC,UAAS,iBAAO,CAAEP,UAAWM,OANlC,EAAKE,MAAQ,CACXR,UAAW,EAAKH,MAAMY,SAAS,GAAGZ,MAAMC,OAJzB,E,qDAYT,IAENO,EAOEN,KAPFM,eAEEI,EAKAV,KANFF,MACEY,SAGAT,EAEAD,KAHFS,MACER,UAIJ,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,cACXQ,EAASC,KAAI,SAACC,GAAW,IAChBb,EAAUa,EAAMd,MAAhBC,MAER,OACE,kBAAC,EAAD,CACEE,UAAaA,EACbY,IAAOd,EACPA,MAAOA,EACPF,QAAWS,QAKnB,yBAAKJ,UAAU,iBACZQ,EAASC,KAAI,SAACC,GACb,GAAGA,EAAMd,MAAMC,QAAUE,EACzB,OAAOW,EAAMd,MAAMY,kB,GA/CGP,IAAMC,WCsBzBU,MAzBf,SAAsBhB,GAAQ,IACrBiB,EAAiCjB,EAAjCiB,WAAYC,EAAqBlB,EAArBkB,MAAOC,EAAcnB,EAAdmB,WAE1B,OAAGA,IAAoF,IAAtEF,EAAWG,QAAQC,cAAcC,QAAQH,EAAWE,eAC5D,KAIP,wBACEjB,UAAW,mBAAqBa,EAAWM,YAAc,UAAY,KAErE,2BACEnB,UAAU,sBACVoB,KAAK,WACLC,KAAK,aACLC,SAAU1B,EAAM2B,YAChBC,MAAOV,EACPW,QAASZ,EAAWM,cAErBN,EAAWG,QACXpB,EAAM8B,kBAAoB,4BAAQ1B,UAAU,oBAAoBL,QAAW,SAACgC,GAAO/B,EAAM8B,iBAAiBC,EAAGb,KAAS,uBAAGd,UAAU,wBCnB3H,SAAS4B,EAAShC,GAC/B,OACE,wBAAII,UAAU,aACXJ,EAAMiC,SAASpB,KAAI,SAACI,EAAYC,GAAb,OAO1B,SAAoBlB,EAAOiB,EAAYC,GACrC,IAAMgB,EACJ,kBAAC,EAAD,CACEnB,IAAKG,EACLD,WAAYA,EACZC,MAAOA,EACPS,YAAa3B,EAAM2B,YACnBG,iBAAkB9B,EAAM8B,iBACxBX,WAAYnB,EAAMmB,aAGtB,OAAQnB,EAAMmC,YACZ,KAAKnC,EAAMoC,OAAOC,OAChB,OAAQpB,EAAWM,aAAeW,EACpC,KAAKlC,EAAMoC,OAAOE,UAChB,OAAOrB,EAAWM,aAAeW,EACnC,QACE,OAAOA,GAvBLK,CAAWvC,EAAOiB,EAAYC,O,ICLjBsB,E,kDACnB,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IAMRyC,SAAW,SAACV,GACVA,EAAEW,iBAEF,IAAMC,EAAcZ,EAAEa,OAAOC,SAAT,SAEdC,EAAOH,EAAYf,MAAMmB,OACzBC,EAAQ,EAAKhD,MAAMiD,cAAcH,GAEvC,EAAKpC,UAAS,iBAAK,CAACsC,YACpBL,EAAYf,MAAM,IAdlB,EAAKjB,MAAQ,CACXqC,WAAOE,GAHQ,E,qDAoBjB,OACI,0BAAMT,SAAUvC,KAAKuC,SAAUrC,UAAU,aACtCF,KAAKS,MAAMqC,OAAS,yBAAK5C,UAAU,oBAAoBF,KAAKS,MAAMqC,OACnE,2BAAOxB,KAAK,OAAOC,KAAK,WAAWrB,UAAU,qBAC7C,4BAAQA,UAAU,qBAAlB,Y,GAzB4BC,IAAMC,WCyJ7B6C,G,wDAlJb,WAAYnD,GAAQ,IAAD,8BACjB,cAAMA,IAyBRoD,iBAAmB,SAACrB,GAClB,IAAMZ,EAAaY,EAAEa,OAAOhB,MAAMmB,OAClC,EAAKrC,UAAS,iBAAO,CAAES,WAAYA,OA5BlB,EAuCnB8B,cAAgB,SAACH,GACf,OAAKA,EAEM,EAAKO,OAAOP,EAAM,EAAKnC,MAAMsB,UAC/B,gCAGT,EAAKvB,UAAS,SAAC4C,GAAD,MAAgB,CAC5BrB,SAAS,GAAD,mBAAMqB,EAAUrB,UAAhB,CAA0B,CAAEb,QAAS0B,EAAMvB,aAAa,SANzD,kCAzCQ,EAmDnBI,YAAc,SAACI,GACb,IAAMwB,EAAWxB,EAAEa,OACb1B,EAAQsC,SAASD,EAAS3B,OAC1B6B,EAAW,EAAK9C,MAAMsB,SAASf,GACrCuC,EAASlC,YAAcgC,EAAS1B,QAEhC,EAAKnB,UAAS,SAAC4C,GAAD,MAAgB,CAC5BrB,SAAS,GAAD,mBACHqB,EAAUrB,SAASyB,WAAMR,EAAWhC,IADjC,CAENuC,GAFM,YAGHH,EAAUrB,SAASyB,MAAMxC,EAAQ,UA7DvB,EAkEnBY,iBAAmB,SAACC,EAAGb,GACrBa,EAAEW,iBAEGiB,OAAOC,QAAQ,4BAEpB,EAAKlD,UAAS,SAAC4C,GAAD,MAAgB,CAC5BrB,SAAS,GAAD,mBACHqB,EAAUrB,SAASyB,WAAMR,EAAWhC,IADjC,YAEHoC,EAAUrB,SAASyB,MAAMxC,EAAQ,UA1EvB,EA+EnB2C,gBAAkB,SAAC9B,GACZ4B,OAAOC,QAAQ,4BAEpB,EAAKlD,UAAS,SAAC4C,GAAD,MAAgB,CAC5BrB,SAAUqB,EAAUrB,SAAS6B,QAC3B,SAAC7C,GAAD,OAAiBA,EAAWM,oBAlFhC,EAAKZ,MAAQ,CACXsB,SAAU,GACVd,WAAY,IAJG,E,gEASjB,IACE,IAAM4C,EAAOJ,OAAOK,aAAaC,QAAQ,YACnChC,EAAWiC,KAAKC,MAAMJ,GAExB9B,GACF/B,KAAKQ,UAAS,iBAAO,CAAEuB,eAEzB,MAAOF,O,yCAKQqC,EAAWd,GAC5B,IAAMS,EAAOG,KAAKG,UAAUnE,KAAKS,MAAMsB,UACvC0B,OAAOK,aAAaM,QAAQ,WAAYP,K,6BAQnCjB,EAAMyB,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAClC,GAAID,EAAQC,GAAGpD,UAAY0B,EACzB,OAAOyB,EAAQC,K,+BAwDnB,IAAMpC,EAAS,CAAEsC,IAAK,MAAOrC,OAAQ,SAAUC,UAAW,aAE1D,OACE,yBAAKlC,UAAU,OACb,wBAAIA,UAAU,gBAAd,aACA,yBAAKA,UAAU,uBACb,2BACEA,UAAU,cACVoB,KAAK,OACLC,KAAK,SACLkD,QAASzE,KAAKkD,iBACdwB,YAAc,YAGlB,kBAAC,EAAD,KACE,yBAAK3E,MAAOmC,EAAOsC,KACjB,kBAAC,EAAD,CAAUzB,cAAe/C,KAAK+C,gBAC9B,kBAACjB,EAAD,CACEC,SAAU/B,KAAKS,MAAMsB,SACrBN,YAAazB,KAAKyB,YAClBQ,WAAYC,EAAOsC,IACnBtC,OAAQA,EACRjB,WAAYjB,KAAKS,MAAMQ,cAG3B,yBAAKlB,MAAOmC,EAAOC,QACjB,kBAAC,EAAD,CAAUY,cAAe/C,KAAK+C,gBAC9B,kBAACjB,EAAD,CACEC,SAAU/B,KAAKS,MAAMsB,SACrBN,YAAazB,KAAKyB,YAClBQ,WAAYC,EAAOC,OACnBD,OAAQA,EACRjB,WAAYjB,KAAKS,MAAMQ,cAG3B,yBAAKlB,MAAOmC,EAAOE,WACjB,kBAACN,EAAD,CACEC,SAAU/B,KAAKS,MAAMsB,SACrBN,YAAazB,KAAKyB,YAClBQ,WAAYC,EAAOE,UACnBF,OAAQA,EACRN,iBAAkB5B,KAAK4B,iBACvBX,WAAYjB,KAAKS,MAAMQ,aAEzB,yBAAKf,UAAU,oBACb,4BAAQL,QAASG,KAAK2D,gBAAiBzD,UAAU,eAAjD,sB,GAxIIC,IAAMC,YCIJuE,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.10c28f80.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Tab extends React.Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n      },\r\n    } = this;\r\n    \r\n    let className = 'tabs__list-item';\r\n\r\n    if(activeTab === label) {\r\n      className += ' tabs__list--active'\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className = {className}\r\n        onClick = {onClick}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tab from './Tab';\n\nexport default class Tabs extends React.Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab) => {\n    this.setState(() => ({ activeTab: tab }));\n  }\n\n  render() {\n    const {\n      onClickTabItem,\n      props: {\n        children,\n      },\n      state: {\n        activeTab,\n      }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tabs__list\">\n          {children.map((child) => {\n            const { label } = child.props;\n\n            return (\n              <Tab\n                activeTab = {activeTab}\n                key = {label}\n                label={label}\n                onClick = {onClickTabItem}\n              />\n            );\n          })}\n        </ul>\n        <div className=\"tabs__content\">\n          {children.map((child)=>{\n            if(child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}","import React from \"react\";\r\n\r\nfunction TodoListItem(props) {\r\n  const {listObject, index, searchText} = props;\r\n  \r\n  if(searchText && listObject.details.toLowerCase().indexOf(searchText.toLowerCase())===-1) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <li\r\n      className={\"todo-list__item\" + (listObject.isCompleted ? \" strike\" : \"\")}\r\n    >\r\n      <input\r\n        className=\"todo-list__checkbox\"\r\n        type=\"checkbox\"\r\n        name=\"toDoStatus\"\r\n        onChange={props.onCheckItem}\r\n        value={index}\r\n        checked={listObject.isCompleted}\r\n      />\r\n      {listObject.details}\r\n      {props.handleDeleteItem && <button className=\"todo-list__button\" onClick = {(e) => {props.handleDeleteItem(e, index)}}><i className=\"fas fa-trash-alt\"></i></button>}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoListItem;","import React from \"react\";\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nexport default function TodoList(props) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {props.todoList.map((listObject, index) =>\r\n        filterList(props, listObject, index)\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction filterList(props, listObject, index) {\r\n  const listComponent = (\r\n    <TodoListItem\r\n      key={index}\r\n      listObject={listObject}\r\n      index={index}\r\n      onCheckItem={props.onCheckItem}\r\n      handleDeleteItem={props.handleDeleteItem}\r\n      searchText={props.searchText}\r\n    />\r\n  );\r\n  switch (props.visibility) {\r\n    case props.labels.active:\r\n      return !listObject.isCompleted && listComponent;\r\n    case props.labels.completed:\r\n      return listObject.isCompleted && listComponent;\r\n    default:\r\n      return listComponent;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: undefined,\r\n    }\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const textElement = e.target.elements[\"toDoText\"];\r\n\r\n    const text = textElement.value.trim();\r\n    const error = this.props.handleAddItem(text);\r\n\r\n    this.setState(()=>({error}));\r\n    textElement.value='';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <form onSubmit={this.onSubmit} className=\"todo-form\">\r\n          {this.state.error && <div className=\"todo-form__error\">{this.state.error}</div>}\r\n          <input type=\"text\" name=\"toDoText\" className=\"todo-form__input\" />\r\n          <button className=\"todo-form__button\">Add</button>\r\n        </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./css/App.css\";\nimport Tabs from \"./components/Tabs\";\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\nimport \"./css/fontawesome-free-5.13.0-web/css/all.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      searchText: \"\",\n    };\n  }\n\n  componentDidMount() {\n    try {\n      const json = window.localStorage.getItem(\"todoList\");\n      const todoList = JSON.parse(json);\n\n      if (todoList) {\n        this.setState(() => ({ todoList }));\n      }\n    } catch (e) {\n      //Do nothing\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const json = JSON.stringify(this.state.todoList);\n    window.localStorage.setItem(\"todoList\", json);\n  }\n\n  updateSearchText = (e) => {\n    const searchText = e.target.value.trim();\n    this.setState(() => ({ searchText: searchText }));\n  };\n\n  search(text, myArray) {\n    for (let i = 0; i < myArray.length; i++) {\n      if (myArray[i].details === text) {\n        return myArray[i];\n      }\n    }\n  }\n\n  handleAddItem = (text) => {\n    if (!text) {\n      return \"Please enter something to add.\";\n    } else if (this.search(text, this.state.todoList)) {\n      return \"The task already exists.\";\n    }\n\n    this.setState((prevState) => ({\n      todoList: [...prevState.todoList, { details: text, isCompleted: false }],\n    }));\n  };\n\n  onCheckItem = (e) => {\n    const checkBox = e.target;\n    const index = parseInt(checkBox.value);\n    const newValue = this.state.todoList[index];\n    newValue.isCompleted = checkBox.checked;\n\n    this.setState((prevState) => ({\n      todoList: [\n        ...prevState.todoList.slice(undefined, index),\n        newValue,\n        ...prevState.todoList.slice(index + 1),\n      ],\n    }));\n  };\n\n  handleDeleteItem = (e, index) => {\n    e.preventDefault();\n\n    if (!window.confirm(\"Are you sure to delete?\")) return;\n\n    this.setState((prevState) => ({\n      todoList: [\n        ...prevState.todoList.slice(undefined, index),\n        ...prevState.todoList.slice(index + 1),\n      ],\n    }));\n  };\n\n  handleDeleteAll = (e) => {\n    if (!window.confirm(\"Are you sure to delete?\")) return;\n\n    this.setState((prevState) => ({\n      todoList: prevState.todoList.filter(\n        (listObject) => !listObject.isCompleted\n      ),\n    }));\n  };\n\n  render() {\n    const labels = { all: \"All\", active: \"Active\", completed: \"Completed\" };\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__heading\">#todo App</h1>\n        <div className=\"app__search-wrapper\">\n          <input\n            className=\"app__search\"\n            type=\"text\"\n            name=\"search\"\n            onInput={this.updateSearchText}\n            placeholder = \"Search\"\n          />\n        </div>\n        <Tabs>\n          <div label={labels.all}>\n            <TodoForm handleAddItem={this.handleAddItem} />\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.all}\n              labels={labels}\n              searchText={this.state.searchText}\n            />\n          </div>\n          <div label={labels.active}>\n            <TodoForm handleAddItem={this.handleAddItem} />\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.active}\n              labels={labels}\n              searchText={this.state.searchText}\n            />\n          </div>\n          <div label={labels.completed}>\n            <TodoList\n              todoList={this.state.todoList}\n              onCheckItem={this.onCheckItem}\n              visibility={labels.completed}\n              labels={labels}\n              handleDeleteItem={this.handleDeleteItem}\n              searchText={this.state.searchText}\n            />\n            <div className=\"app__btn-wrapper\">\n              <button onClick={this.handleDeleteAll} className=\"app__button\">\n                Delete All\n              </button>\n            </div>\n          </div>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}